#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
saWide<-spread(d,famrel,absences)
#compare famrel 1 and 2
newdf <- subset(relevantdata, famrel == 4 | famrel == 5, select=c(famrel,absences))
wilcox.test(newdf$absences ~ newdf$famrel)
#compare famrel 1 and 3
newdf2 <- subset(relevantdata, famrel == 1 | famrel == 3, select=c(famrel,absences))
wilcox.test(newdf2$absences ~ newdf2$famrel)
#compare famrel 1 and 4
newdf3 <- subset(relevantdata, famrel == 1 | famrel == 4, select=c(famrel,absences))
wilcox.test(newdf3$absences ~ newdf3$famrel)
library(tidyverse)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
library(tidyverse)
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
points(y~x, col="cyan")
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
#overlaying all the data points on the boxplot in cyan
points(yabsences~x, col="cyan")
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
library(tidyverse)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
x = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= median)
x
View(relevantdata)
M
?boxplot.stats
boxplot.stats
boxplot
boxplot.matrix()
boxplot(data())
boxplot
?boxplot.stats
boxplot.stats
boxplot.value
boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE)
text(x = boxplot.stats(X)$stats, labels = boxplot.stats(X)$stats, y = 1.25)
text(x = boxplot.stats(boxplot)$stats, labels = boxplot.stats(X)$stats, y = 1.25)
#plotting boxplot
y <- boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
text(x = boxplot.stats(y)$stats, labels = boxplot.stats(X)$stats, y = 1.25)
boxplot.stats()
boxplot.stats(y)
boxplot.stats
relevantdata <- d %>% select(famrel, absences)
saWide<-spread(d,famrel,absences)
#compare famrel 1 and 2
newdf <- subset(relevantdata, famrel == 4 | famrel == 5, select=c(famrel,absences))
boxplot(saWide)
boxplot(saWide)
boxplot.matrix()
boxplot.matrix(x = boxplot)
y$stats[3,]
y$stats
y$stats[1,]
library(tidyverse)
dataMat <- read.csv("student-mat.csv")
xfamrel <- dataMat$famrel
yabsences <- dataMat$absences
M = tapply(dataMat$absences, INDEX = dataMat$famrel, FUN= mean)
relevantdata <- spread(dataMat,famrel,absences)
names(relevantdata)[32]<-"Very bad"
names(relevantdata)[33]<-"Bad"
names(relevantdata)[34]<-"Average"
names(relevantdata)[35]<-"Good"
names(relevantdata)[36]<-"Excellent"
boxplot(relevantdata[,c(32:36)], pch = 19, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (Very bad, Bad, Average, Good, and Excellent)", ylab = "Number of Recorded Absences", frame = T)
points(yabsences~xfamrel, col="cyan")
points(M,col="red",pch="+",cex=2)
legend(x="topright", legend=c("Data points", "Mean", "Outliers"),
col=c("cyan", "red", "black"), pch = c(1, 3, 19))
summary(relevantdata[,c(32:36)],digits = 3)
pdf("analysis-wilcox-test.pdf")
#compare famrel 1 and 2
datatotest <- subset(dataMat, famrel<3)
wilcox.test(absences ~famrel, data = datatotest)
#compare famrel 1 and 3
datatotest2 <- subset(dataMat, famrel == 1 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest2)
#compare famrel 1 and 4
datatotest3 <- subset(dataMat, famrel == 1 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest3)
#compare famrel 1 and 5
datatotest4 <- subset(dataMat, famrel == 1 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest4)
#compare famrel 2 and 3
datatotest5 <- subset(dataMat, famrel == 2 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest5)
#compare famrel 2 and 4
datatotest6 <- subset(dataMat, famrel == 2 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest6)
#compare famrel 2 and 5
datatotest7 <- subset(dataMat, famrel == 2 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest7)
#compare famrel 3 and 4
datatotest8 <- subset(dataMat, famrel == 3 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest8)
#compare famrel 3 and 5
datatotest9 <- subset(dataMat, famrel == 3 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest9)
#compare famrel 4 and 5
datatotest10 <- subset(dataMat, famrel == 4 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest10)
dev.off()
text("analysis-wilcox-test.txt")
#compare famrel 1 and 2
datatotest <- subset(dataMat, famrel<3)
wilcox.test(absences ~famrel, data = datatotest)
#compare famrel 1 and 3
datatotest2 <- subset(dataMat, famrel == 1 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest2)
#compare famrel 1 and 4
datatotest3 <- subset(dataMat, famrel == 1 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest3)
#compare famrel 1 and 5
datatotest4 <- subset(dataMat, famrel == 1 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest4)
#compare famrel 2 and 3
datatotest5 <- subset(dataMat, famrel == 2 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest5)
#compare famrel 2 and 4
datatotest6 <- subset(dataMat, famrel == 2 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest6)
#compare famrel 2 and 5
datatotest7 <- subset(dataMat, famrel == 2 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest7)
#compare famrel 3 and 4
datatotest8 <- subset(dataMat, famrel == 3 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest8)
#compare famrel 3 and 5
datatotest9 <- subset(dataMat, famrel == 3 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest9)
#compare famrel 4 and 5
datatotest10 <- subset(dataMat, famrel == 4 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest10)
dev.off()
text("analysis-wilcox-test.txt")
#compare famrel 1 and 2
datatotest <- subset(dataMat, famrel<3)
wilcox.test(absences ~famrel, data = datatotest)
#compare famrel 1 and 3
datatotest2 <- subset(dataMat, famrel == 1 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest2)
#compare famrel 1 and 4
datatotest3 <- subset(dataMat, famrel == 1 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest3)
#compare famrel 1 and 5
datatotest4 <- subset(dataMat, famrel == 1 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest4)
#compare famrel 2 and 3
datatotest5 <- subset(dataMat, famrel == 2 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest5)
#compare famrel 2 and 4
datatotest6 <- subset(dataMat, famrel == 2 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest6)
#compare famrel 2 and 5
datatotest7 <- subset(dataMat, famrel == 2 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest7)
#compare famrel 3 and 4
datatotest8 <- subset(dataMat, famrel == 3 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest8)
#compare famrel 3 and 5
datatotest9 <- subset(dataMat, famrel == 3 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest9)
#compare famrel 4 and 5
datatotest10 <- subset(dataMat, famrel == 4 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest10)
dev.off()
write("analysis-wilcox-test.txt")
#compare famrel 1 and 2
datatotest <- subset(dataMat, famrel<3)
wilcox.test(absences ~famrel, data = datatotest)
#compare famrel 1 and 3
datatotest2 <- subset(dataMat, famrel == 1 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest2)
#compare famrel 1 and 4
datatotest3 <- subset(dataMat, famrel == 1 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest3)
#compare famrel 1 and 5
datatotest4 <- subset(dataMat, famrel == 1 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest4)
#compare famrel 2 and 3
datatotest5 <- subset(dataMat, famrel == 2 | famrel == 3)
wilcox.test(absences ~famrel, data = datatotest5)
#compare famrel 2 and 4
datatotest6 <- subset(dataMat, famrel == 2 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest6)
#compare famrel 2 and 5
datatotest7 <- subset(dataMat, famrel == 2 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest7)
#compare famrel 3 and 4
datatotest8 <- subset(dataMat, famrel == 3 | famrel == 4)
wilcox.test(absences ~famrel, data = datatotest8)
#compare famrel 3 and 5
datatotest9 <- subset(dataMat, famrel == 3 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest9)
#compare famrel 4 and 5
datatotest10 <- subset(dataMat, famrel == 4 | famrel == 5)
wilcox.test(absences ~famrel, data = datatotest10)
dev.off()
dataMat <- read.csv("student-mat.csv")
#plotting boxplot
y<- boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
y$stats
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
install.packages("tidyverse")
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
install.packages("tidyverse")
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(y~x, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
install.packages("tidyverse")
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
#install 'tidyverse' if computer does not have it, and call the library
install.packages("tidyverse")
library(tidyverse)
#create a pdf to which visualisation will be placed in file called 'visualization.pdf'
pdf("visualization.pdf", width = 10, height = 10)
#read the dataset and create a data frame with only the two relevant columns used, 'famrel' and 'absences'
d <- read.csv("student-mat.csv")
relevantdata <- d %>% select(famrel, absences)
xfamrel <- relevantdata$famrel
yabsences <- relevantdata$absences
#finding the means of the absences for the different reported family relationships
M = tapply(relevantdata$absences, INDEX = relevantdata$famrel, FUN= mean)
#plotting boxplot
boxplot(yabsences ~ xfamrel, main = "Boxplot to Show Distribution In Recorded Absences (Y axis) Between Students Who Report
Different Quality of Family Relationships (1 - very bad to 5 - excellent) (X - axis)",
xlab = "Self Reported Family Relationships (1 - very bad to 5 - excellent)", ylab = "Number of Recorded Absences", pch = 19, frame = T)
#overlaying all the data points on the boxplot in cyan
points(yabsences~xfamrel, col="cyan")
#overlaying means on boxplot as a red '+'
points(M,col="red",pch="+",cex=2)
#create a key
legend(x="topright", legend=c("Data points", "Mean", "Outliers"), col=c("cyan", "red", "black"), pch = c(1, 3, 19))
dev.off()
